<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en"><generator uri="https://jekyllrb.com/" version="4.4.1">Jekyll</generator><link href="/feed.xml" rel="self" type="application/atom+xml" /><link href="/" rel="alternate" type="text/html" hreflang="en" /><updated>2025-09-09T17:13:55+02:00</updated><id>/feed.xml</id><title type="html">Niklas Hilding</title><entry><title type="html">My .vimrc file</title><link href="/vim/2025/09/09/my-vimrc-file.html" rel="alternate" type="text/html" title="My .vimrc file" /><published>2025-09-09T00:00:00+02:00</published><updated>2025-09-09T00:00:00+02:00</updated><id>/vim/2025/09/09/my-vimrc-file</id><content type="html" xml:base="/vim/2025/09/09/my-vimrc-file.html"><![CDATA[<p>This is my <a href="https://github.com/niklasnson/dotfiles/blob/main/apps/vim/vimrc">.vimrc</a> file, as I mentioned earlier, I have a new job where working with Vim is again optimal, so I needed to go through my configuration and update it. I thought this could be a good exercise to do together.</p>

<h4 id="plugins">Plugins</h4>

<p>A couple of these plugins have been with me for a very long time and some I have only recently started using. There are a couple that are primarily useful for certain languages or tools. For me to install a plugin, it should add something special to my work.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   0. Plugins

    call plug#begin()

    Plug 'arcticicestudio/nord-vim'
    Plug 'vim-airline/vim-airline'
    Plug 'vim-airline/vim-airline-themes'
    Plug 'ctrlpvim/ctrlp.vim'
    Plug 'vim-ruby/vim-ruby'
    Plug 'scrooloose/nerdtree'
    Plug 'ddollar/nerdcommenter'
    Plug 'tpope/vim-rails'
    Plug 'preservim/tagbar'
    Plug 'junegunn/fzf', { 'do': { -&gt; fzf#install() } }
    Plug 'junegunn/fzf.vim'
    Plug 'tpope/vim-fugitive'
    Plug 'tpope/vim-ragtag'
    Plug 'tpope/vim-surround'
    Plug 'vim-test/vim-test'
    Plug 'tpope/vim-commentary'
    Plug 'godlygeek/tabular'
    Plug 'preservim/vim-markdown'
    Plug 'vim-test/vim-test'
    Plug 'tpope/vim-commentary'

    call plug#end()

    "</span> Breif <span class="nb">help</span>
    <span class="s2">"
    "</span> :PlugInstall  - Install plugins
    <span class="s2">" :PlugUpgrade  - Upgrade vim-plug itself
    "</span> :PlugClean    - Remove unlisted plugin</code></pre></figure>

<h5 id="ruby-and-ruby-on-rails">Ruby and Ruby on Rails</h5>
<ul>
  <li>vim-ruby/vim-ruby</li>
  <li>tpope/vim-rails</li>
  <li>vim-test/vim-test</li>
</ul>

<p><strong>Vim-Ruby</strong> contains Vim’s runtime files for ruby support. This includes syntax highlighting, indentation, omnicompletion, and various useful tools and mappings.</p>

<p><strong>Vim-Rails</strong> enhanced syntax highlighting, easy navigation of the Rails directory structure, task runner etc. </p>

<h5 id="file-handling">File handling</h5>
<ul>
  <li>ctrlpvim/ctrlp.vim</li>
  <li>scrooloose/nerdtree</li>
</ul>

<p><strong>NERDTree</strong> is s a file system explorer for the Vim editor. Using this plugin, you can visually browse complex directory hierarchies, quickly open files for reading or editing, and perform basic file system operations.</p>

<p><strong>CTRLP</strong> is a full path fuzzy file, buffer, mru, tag, … finder for Vim. When i can find my way around a project is the ultime time booster.</p>

<h5 id="linters-and-language-tools">Linters and language tools</h5>
<ul>
  <li>tpope/vim-ragtag</li>
  <li>preservim/vim-markdown</li>
  <li>tpope/vim-commentary</li>
  <li>tpope/vim-surround</li>
</ul>

<p><strong>Vim-Markdown</strong> provides syntax highlighting, matching rules and mappings for the original Markdown and extensions.</p>

<p><strong>Vim_Commentary</strong> simply comment stuff out.</p>

<h5 id="misc-tools">Misc tools</h5>
<ul>
  <li>tpope/vim-surround</li>
  <li>godlygeek/tabular</li>
</ul>

<p><strong>Vim-Surrond</strong> is all about “surroundings”: parentheses, brackets, quotes, XML tags, and more. The plugin provides mappings to easily delete, change and add such surroundings in pairs.</p>

<p><strong>tabular</strong> line up text, with ease.</p>

<h4 id="functions">Functions</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   1. Functions

    function! VisualSelection(direction, extra_filter) range
      let l:saved_reg = @"</span>
      execute <span class="s2">"normal! vgvy"</span>

      <span class="nb">let </span>l:pattern <span class="o">=</span> escape<span class="o">(</span>@<span class="s2">", "</span><span class="se">\\</span>/.<span class="k">*</span><span class="s1">'$^~[]")
      let l:pattern = substitute(l:pattern, "\n$", "", "")

      if a:direction == '</span>gv<span class="s1">'
          call CmdLine("Ack '</span><span class="s2">" . l:pattern . "</span><span class="s1">' " )
      elseif a:direction == '</span>replace<span class="s1">'
          call CmdLine("%s" . '</span>/<span class="s1">'. l:pattern . '</span>/<span class="s1">')
      endif

      let @/ = l:pattern
      let @" = l:saved_reg
    endfunction</span></code></pre></figure>

<p><strong>VisualSelection(direction, extra_filter)</strong> search for the word under the cursor. Supe usefull after a an idea by Michael Naumann</p>

<h5 id="os-specific-settings">OS specific settings</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   2. OS specific settings

    if has('mac')
    end
    if has('linux')
      nnoremap &lt;silent&gt; &lt;leader&gt;cf :&lt;c-u&gt;call FormatCodeWithCodestyler()&lt;cr&gt;
    end</span></code></pre></figure>

<p>Now days im only using Linux machines, but i keep this - Codestyler is only avelibal for Linux.</p>

<h4 id="general-congifuration-options">General congifuration options</h4>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   3. General congifuration options

    set history=50
    "</span> Use spaces instead of tabs
    <span class="nb">set </span>expandtab
    <span class="s2">" Be smart when using tabs ;)
    set smarttab
    set tabstop=2
    set shiftwidth=2
    set softtabstop=2
    "</span> Linebreak on 500 characters
    <span class="nb">set </span>lbr
    <span class="nb">set </span><span class="nv">tw</span><span class="o">=</span>500
    <span class="nb">set </span>ai              <span class="s2">" Auto indent
    set si              "</span> Smart indent
    <span class="nb">set </span>wrap            <span class="s2">" Wrap lines
    set so=7            "</span> Set 7 lines to the cursor - when moving vertically using j/k
    <span class="nb">set </span>number
    <span class="nb">set </span><span class="nv">numberwidth</span><span class="o">=</span>5
    <span class="nb">set </span>cursorline
    <span class="nb">set </span>autowrite       <span class="s2">" Automatically :write before running commands
    set tags=./tags
    set autoindent		  "</span> always <span class="nb">set </span>autoindenting on
    <span class="nb">set </span>showcmd		      <span class="s2">" display incomplete commands
    "</span> Buffert settings
    <span class="nb">set </span>autoread        <span class="s2">" Auto-reload buffers when file changed on disk
    set nobackup        "</span> Don<span class="s1">'t use backup files
    set nowritebackup   " Don'</span>t backup the file <span class="k">while </span>editing
    <span class="nb">set </span>noswapfile      <span class="s2">" Don't create swapfiles for new buffers
    "</span> Ignore <span class="k">case</span> when searching
    <span class="nb">set </span>ignorecase
    <span class="s2">" With a map leader it's possible to do extra key combinations
    "</span> like &lt;leader&gt;w saves the current file
    <span class="nb">let </span>mapleader <span class="o">=</span> <span class="s2">","</span>
    <span class="s2">" Configure backspace so it acts as it should act
    set backspace=eol,start,indent
    set whichwrap+=&lt;,&gt;,h,l</span></code></pre></figure>

<h5 id="file-compatibility-and-configuration-issues">File compatibility and configuration issues</h5>

<p>Yes i loke the cursorline, and i search ignoreing case.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   4. File compatibility and configuration issues

    let vim_markdown_folding_disabled = 1</span></code></pre></figure>

<p>Nothing special more then some preferences for vim_markdown plugin.</p>

<h5 id="color-lookfeel-configuration">Color, Look&amp;Feel Configuration</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   5. Color, Look&amp;Feel Configuration

    syntax enable         "</span> <span class="nb">enable </span>syntax highlighting
    colorscheme nord
    au BufRead,BufNewFile <span class="o">{</span>Gemfile,Rakefile,Vagrantfile,Thorfile,Procfile,Guardfile,config.ru,<span class="k">*</span>.rake<span class="o">}</span> <span class="nb">set </span><span class="nv">ft</span><span class="o">=</span>ruby
    autocmd BufWritePre <span class="k">*</span> :%s/<span class="se">\s\+</span><span class="nv">$/</span>/e

    <span class="s2">" Settings for gvim
    if has("</span>gui_running<span class="s2">")
      set guioptions-=T
      if has('mac')
        set guifont=Fira</span><span class="se">\ </span><span class="s2">Code:h14
      end
      if has('linux')
       set guifont=Fira</span><span class="se">\ </span><span class="s2">Code</span><span class="se">\ </span><span class="s2">12
      end
    endif</span></code></pre></figure>

<p>Yes i love Nord. Some old special config for font size when i was using a Mac and a Linux.</p>

<h5 id="modes">Modes</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   6. Modes


    "</span> Visual mode pressing <span class="k">*</span> or <span class="c"># searches for the current selection</span>
    <span class="s2">" Super useful! From an idea by Michael Naumann
    &lt;silent&gt; * :&lt;C-u&gt;call VisualSelection('', '')&lt;CR&gt;/&lt;C-R&gt;=@/&lt;CR&gt;&lt;CR&gt;
    vnoremap &lt;silent&gt; # :&lt;C-u&gt;call VisualSelection('', '')&lt;CR&gt;?&lt;C-R&gt;=@/&lt;CR&gt;&lt;CR&gt;</span></code></pre></figure>

<p>Key mapping only in special modes.</p>

<h5 id="plugins-and-key-mappings">Plugins and key mappings</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   7. Plugins and key mappings

    "</span> Plugin settings
    <span class="nb">let </span>g:ctrlp_custom_ignore <span class="o">=</span> <span class="s1">'\v[\/]\.(git|tmp|storage|vendor|node_modules|coverage|log|public)$'</span>

    <span class="s2">" Key mappings
    nnoremap &lt;C-s&gt; :Ag&lt;space&gt;
    nnoremap &lt;leader&gt;n :NERDTreeFocus&lt;CR&gt;
    nnoremap &lt;C-n&gt; :NERDTree&lt;CR&gt;
    nnoremap &lt;C-t&gt; :NERDTreeToggle&lt;CR&gt;
    nnoremap &lt;C-f&gt; :NERDTreeFind&lt;CR&gt;
    nmap &lt;Leader&gt;r :NERDTreeFocus&lt;cr&gt;R&lt;c-w&gt;&lt;c-p&gt;
    let g:ctrlp_custom_ignore = {
      </span><span class="se">\ </span><span class="s2">'dir':  '</span><span class="se">\.</span><span class="s2">git</span><span class="nv">$\</span><span class="s2">|</span><span class="se">\.</span><span class="s2">yardoc</span><span class="se">\|</span><span class="s2">node_modules</span><span class="se">\|</span><span class="s2">log</span><span class="se">\|</span><span class="s2">tmp</span><span class="nv">$'</span><span class="s2">,
      </span><span class="se">\ </span><span class="s2">'file': '</span><span class="se">\.</span><span class="s2">so</span><span class="nv">$\</span><span class="s2">|</span><span class="se">\.</span><span class="s2">dat</span><span class="nv">$|</span><span class="se">\.</span><span class="s2">DS_Store</span><span class="nv">$'</span><span class="s2">
      </span><span class="se">\ </span><span class="s2">}
    nmap &lt;F8&gt; :TagbarToggle&lt;CR&gt;
    "</span> Vim-Test

    <span class="nb">let test</span><span class="c">#strategy = "vimterminal"</span>

    nmap &lt;silent&gt; &lt;leader&gt;t :TestNearest&lt;CR&gt;
    nmap &lt;silent&gt; &lt;leader&gt;T :TestFile&lt;CR&gt;
    nmap &lt;silent&gt; &lt;leader&gt;a :TestSuite&lt;CR&gt;
    nmap &lt;silent&gt; &lt;leader&gt;l :TestLast&lt;CR
    nmap &lt;silent&gt; &lt;leader&gt;g :TestVisit&lt;CR&gt;
    nnoremap &lt;leader&gt;ev :split <span class="nv">$MYVIMRC</span>&lt;cr&gt;
    nnoremap &lt;leader&gt;sv :source <span class="nv">$MYVIMRC</span>&lt;cr&gt;
    <span class="s2">" Git grep visually selected text
   vnoremap &lt;leader&gt;gg y:Ggrep &lt;c-r&gt;"</span>&lt;cr&gt;
   <span class="s2">" Move a line of text using ALT+[jk] or Command+[jk] on mac (Normal mode)
   nmap &lt;M-j&gt; mz:m+&lt;cr&gt;</span><span class="sb">`</span>z
   nmap &lt;M-k&gt; mz:m-2&lt;cr&gt;<span class="sb">`</span><span class="s2">z
   vmap &lt;M-j&gt; :m'&gt;+&lt;cr&gt;</span><span class="sb">`</span>&lt;my<span class="sb">`</span><span class="s2">&gt;mzgv</span><span class="sb">`</span>yo<span class="sb">`</span><span class="s2">z
   vmap &lt;M-k&gt; :m'&lt;-2&lt;cr&gt;</span><span class="sb">`</span><span class="o">&gt;</span>my<span class="sb">`</span><span class="s2">&lt;mzgv</span><span class="sb">`</span>yo<span class="sb">`</span><span class="s2">z
   if has("</span>mac<span class="s2">") || has("</span>macunix<span class="s2">")
    nmap &lt;D-j&gt; &lt;M-j&gt;
    nmap &lt;D-k&gt; &lt;M-k&gt;
    vmap &lt;D-j&gt; &lt;M-j&gt;
    vmap &lt;D-k&gt; &lt;M-k&gt;
   endif
   map &lt;Leader&gt;rt :!ctags -R --languages=ruby,javascript --exclude=vendor --exclude=node_modules --exclude=public --exclude=coverage .&lt;cr&gt;&lt;cr&gt;
   noremap &lt;C-]&gt; &lt;F3&gt;
   "</span> Ctrl+h &amp; Ctrl+l cycle between buffers <span class="k">in </span>the current <span class="nb">split
   </span>noremap &lt;silent&gt; &lt;C-h&gt; :bprev&lt;CR&gt;
   noremap &lt;silent&gt; &lt;C-l&gt; :bnext&lt;CR&gt;
   <span class="s2">" &lt;Leader&gt;q Closes the current buffer
   nnoremap &lt;silent&gt; &lt;Leader&gt;q :Bclose&lt;CR&gt;
   "</span> &lt;Leader&gt;Q Closes the current window
   nnoremap &lt;silent&gt; &lt;Leader&gt;Q &lt;C-w&gt;c
   <span class="s2">"&lt;Leader&gt;Ctrl+q Force Closes the current buffer
   nnoremap &lt;silent&gt; &lt;Leader&gt;&lt;C-q&gt; :Bclose!&lt;CR&gt;
   nnoremap &lt;Leader&gt;gs :Git&lt;CR&gt;
   nnoremap &lt;Leader&gt;gr :GRemove&lt;CR&gt;
   nnoremap &lt;Leader&gt;gl :Gclog&lt;CR&gt;
   nnoremap &lt;Leader&gt;gb :Git_blame&lt;CR&gt;
   nnoremap &lt;Leader&gt;gm :GMove
   vnoremap &lt;Leader&gt;gg :Git
   nnoremap &lt;Leader&gt;gd :Gdiffsplit&lt;CR&gt;</span></code></pre></figure>

<p>Ctags and some personal bindings.</p>

<h5 id="moving-around-bufferts-and-windows">Moving around, bufferts and windows</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   8. Moving around, bufferts and windows

    "</span> Map &lt;Space&gt; to / <span class="o">(</span>search<span class="o">)</span> and Ctrl-&lt;Space&gt; to ? <span class="o">(</span>backwards search<span class="o">)</span>
    map &lt;space&gt; /
    map &lt;C-space&gt; ?
    <span class="s2">" Disable highlight when &lt;leader&gt;&lt;cr&gt; is pressed
    map &lt;silent&gt; &lt;leader&gt;&lt;cr&gt; :noh&lt;cr&gt;
    "</span> Smart way to move between windows
    map &lt;C-j&gt; &lt;C-W&gt;j
    map &lt;C-k&gt; &lt;C-W&gt;k
    map &lt;C-h&gt; &lt;C-W&gt;h
    map &lt;C-l&gt; &lt;C-W&gt;l
    <span class="s2">" Close the current buffer
    map &lt;leader&gt;bd :Bclose&lt;cr&gt;:tabclose&lt;cr&gt;gT
    "</span> Close all the buffers
    map &lt;leader&gt;ba :bufdo bd&lt;cr&gt;
    map &lt;leader&gt;l :bnext&lt;cr&gt;
    map &lt;leader&gt;h :bprevious&lt;cr&gt;
    <span class="s2">" Useful mappings for managing tabs
    map &lt;leader&gt;tn :tabnew&lt;cr&gt;
    map &lt;leader&gt;to :tabonly&lt;cr&gt;
    map &lt;leader&gt;tc :tabclose&lt;cr&gt;
    map &lt;leader&gt;tm :tabmove
    map &lt;leader&gt;t&lt;leader&gt; :tabnext
    nnoremap &lt;Leader&gt;b :buffers&lt;CR&gt;:buffer&lt;Space&gt;
    nnoremap &lt;silent&gt; &lt;C-b&gt; :Buffers&lt;CR&gt;
    "</span> Open new <span class="nb">split </span>panes to right and bottom, which feels more natural
    <span class="nb">set </span>splitbelow
    <span class="nb">set </span>splitright</code></pre></figure>

<h5 id="general-information">General information</h5>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="s2">"-----------------------------------
"</span>
<span class="s2">"   9. General information

"</span>    Building C-tags
<span class="s2">"    ---------------
"</span>    https://kulkarniamit.github.io/whatwhyhow/howto/use-vim-ctags.html
<span class="s2">"
"</span>    The silver surfer
<span class="s2">"    -----------------
"</span>    brew <span class="nb">install </span>the_silver_searcher

<span class="s2">" Local config
if filereadable(</span><span class="nv">$HOME</span><span class="s2"> . "</span>/.vimrc.local<span class="s2">")
  source ~/.vimrc.local
endif</span></code></pre></figure>]]></content><author><name></name></author><category term="vim" /><category term="vim" /><category term="vimrc" /><category term="config" /><summary type="html"><![CDATA[This is my .vimrc file, as I mentioned earlier, I have a new job where working with Vim is again optimal, so I needed to go through my configuration and update it. I thought this could be a good exercise to do together.]]></summary></entry><entry><title type="html">Programming the 6502 by Rodnay Zaks</title><link href="/book-review/6510asm/commodore64/2025/09/07/programming-the-6502-by-rodnay-zaks.html" rel="alternate" type="text/html" title="Programming the 6502 by Rodnay Zaks" /><published>2025-09-07T00:00:00+02:00</published><updated>2025-09-07T00:00:00+02:00</updated><id>/book-review/6510asm/commodore64/2025/09/07/programming-the-6502-by-rodnay-zaks</id><content type="html" xml:base="/book-review/6510asm/commodore64/2025/09/07/programming-the-6502-by-rodnay-zaks.html"><![CDATA[<p>I am most motivated to learn assembler programming on the 68000, but since I recently bought a Commodore 64 after thinking about having one for a long time, I started to think a little about whether I shouldn’t take the plunge and make some of those cool effects that I saw on the screen in my boyhood room as a young man.</p>

<p>One of the floppy disks that came with the 1541-II disk drive that I bought shortly after contained TASM (Turbo Assembler) and then it felt like a sign that I should get started and learn.</p>

<p>I bought a used paperback copy of the book but I can find it on e.g. <a target="_new" href="http://retro.hansotten.nl/uploads/books/Programming_the_6502.pdf">retro.hansotten.nl</a>.</p>

<p>The Commodore 64 has an 8-bit CPU, the MOS 6510, which is closely related to the MOS 6502 but with built-in support for switching the computer’s ROM in and out of the addressable address space. Therefore, I thought the book was a bargain for 35 SEK.</p>

<p>I find the book to be structured and very well-written. It is natural that the book has a strong technical content, but it is easy to follow and I feel that it also gave me a good foundation to stand on when it comes to assembly language programming.</p>

<p>This is the quintessential guide to 6502 assembly. It’s been around a long time and it’s a classic. Rodnay Zaks is the authority on early assembler development.</p>]]></content><author><name></name></author><category term="book-review" /><category term="6510asm" /><category term="commodore64" /><category term="6510asm" /><category term="book" /><category term="reading" /><summary type="html"><![CDATA[I am most motivated to learn assembler programming on the 68000, but since I recently bought a Commodore 64 after thinking about having one for a long time, I started to think a little about whether I shouldn’t take the plunge and make some of those cool effects that I saw on the screen in my boyhood room as a young man.]]></summary><media:thumbnail xmlns:media="http://search.yahoo.com/mrss/" url="/programming-the-6502-by-rodnay-zaks.jpg" /><media:content medium="image" url="/programming-the-6502-by-rodnay-zaks.jpg" xmlns:media="http://search.yahoo.com/mrss/" /></entry><entry><title type="html">Life retrospective</title><link href="/words/2025/09/07/retrospective.html" rel="alternate" type="text/html" title="Life retrospective" /><published>2025-09-07T00:00:00+02:00</published><updated>2025-09-07T00:00:00+02:00</updated><id>/words/2025/09/07/retrospective</id><content type="html" xml:base="/words/2025/09/07/retrospective.html"><![CDATA[<p>I’m turning 51 today, thought it could be egood idea to look at life and where I’m at. I was diagnosed with diabetes in 2022/08, to be completely honest it came very unexpectedly then. Although today I can’t understand how I couldn’t understand based on the major and serious symptoms. Constant need to pee and thirst, loss of feeling in my feet and hands. Extreme craving for sugar and cookies.</p>

<p><img width="350" class="rounded mx-auto d-block" src="/assets/img/retrospective_a.JPEG" /></p>

<p>It’s been a tough couple of years, mainly with my health fluctuating between bad and really bad. I had severe side effects from several of my medications. Sudden chills, mood swings and stomach and head pain. Constantly tired and blurred vision.</p>

<p>But what perhaps hit me the hardest was that suddenly it felt like my strength was halved, all the progress I had made in recent years was suddenly gone. This is where I decided, I would take control of my well-being and I would make sure to get in better shape than ever before. Just over a year ago I discovered Hyrox as a form of training, which has done a lot for my well-being and physical shape. But not only that, it has also helped me a lot mentally.</p>

<p><img width="350" class="rounded mx-auto d-block" src="/assets/img/retrospective_b.JPEG" /></p>

<h4 id="training">Training</h4>
<p>Earlier in life I focused mainly on strength, the goal of my training was to be able to lift as much as possible. Today I train differently; I notice that my diabetes and especially my blood sugar stay at a controlled level more easily if I mix strength and high-intensity running and rowing. It has really made me a lot better.</p>

<p>Now I am aiming to set an even better time in Stockholm at Hyrox 2025. I am registered with my wife and we will run together just like last year. The goal of my training is mainly to feel as good as possible, to cope with the high pace that my work requires and to find an outlet for feelings such as fear and anxiety that my condition gives me.</p>

<h4 id="career">Career</h4>
<p>I resigned from my previous employer after seven years there. It had been a great journey from working primarily as a developer to then working more as a team leader and scrum master. I discovered that it was primarily the work with the team that I found most developing and stimulating. Working with social security and succeeding in developing the team and testing new ways of working was really rewarding.</p>

<p>To get ahead in this, I chose to go to a consulting firm, I don’t regret it for a second - the new challenges that I have already encountered are enormously rewarding and make me grow as a person but also as a leader.</p>

<p>I am very much looking forward to what further challenges I will encounter.</p>

<h4 id="life">Life</h4>
<p>As for my private life, I married my partner after 12 years together. It’s probably the wisest thing I’ve done in a long time, I’m eternally grateful that we share several passions but also understand the passions that we each have and let these take their place in our lives. The fact that we’ve also found a relationship that suits us very well makes me even more secure in our love and friendship.</p>

<h4 id="retrospective-summary">Retrospective summary</h4>
<p>Life is short. Live with urgency! Don’t put off things you want to do or experience. Stop thinking that things will get better, they won’t if you don’t make active choices to change. Change costs energy and you have to dare to challenge yourself, but every time I do it I realize how much I grow and how much it gives me back.</p>

<p>I am now struggling with a complication of my diabetes that in the worst case scenario will take my sight. I have undergone several different procedures but nothing has so far stopped the bleeding and the damage that risks damaging the macula and with it my sight. What feels a little reassuring is that my right eye is in better condition than my left.</p>

<p>But I also notice that when you go through a crisis, you come with new strengths and ways of dealing with stress and anxiety.</p>

<p>I have definitely learned more about myself through these feelings.</p>]]></content><author><name></name></author><category term="words" /><category term="words" /><category term="diabetics" /><category term="life" /><category term="hyrox" /><category term="training" /><summary type="html"><![CDATA[I’m turning 51 today, thought it could be egood idea to look at life and where I’m at. I was diagnosed with diabetes in 2022/08, to be completely honest it came very unexpectedly then. Although today I can’t understand how I couldn’t understand based on the major and serious symptoms. Constant need to pee and thirst, loss of feeling in my feet and hands. Extreme craving for sugar and cookies.]]></summary></entry><entry><title type="html">My Vim configuration</title><link href="/open-source/project/2025/09/05/my-vim-configuration.html" rel="alternate" type="text/html" title="My Vim configuration" /><published>2025-09-05T00:00:00+02:00</published><updated>2025-09-05T00:00:00+02:00</updated><id>/open-source/project/2025/09/05/my-vim-configuration</id><content type="html" xml:base="/open-source/project/2025/09/05/my-vim-configuration.html"><![CDATA[<p>I recently changed clients and now have an assignment where I configure and troubleshoot several Linux systems. It is part of my daily work but I also do a lot of development in Python and C++, at my previous job the recommended editor was VSCodium and we had a lot of special plugins that made the work easier. That is why I chose to change my primary editor to VSCodium, I know it is not a compulsion but I have always found it easiest to work in one and the same editor both at work and in my free time.</p>

<p>But my new assignment makes it much easier to use Vim instead of any other editor. This is a small walkthrough of the configuration I use at home. Due to security class, I can’t really use the same configuration at work.</p>

<h4 id="nerdtree">NERDTree</h4>
<p><img class="img-fluid" src="/assets/img/2025-09-05-my-vim-configuration-and-wow_1.png" /></p>

<p>The NERDTree is a file system explorer for the Vim editor.</p>

<h4 id="ctrlp">CtrlP</h4>
<p><img class="img-fluid" src="/assets/img/2025-09-05-my-vim-configuration-and-wow_2.png" /></p>

<p>CtrlP is a great fuzzy file finder for Vim. As a complement to NERDtree, I think it’s perfect. When I’m comfortable in projects, it’s easier and faster to open files by name than to click through to the files.</p>

<h4 id="fzf">Fzf</h4>
<p><img class="img-fluid" src="/assets/img/2025-09-05-my-vim-configuration-and-wow_3.png" /></p>

<p>fzf itself is not a Vim plugin, and the official repository only provides the basic wrapper function for Vim. It’s up to the users to write their own Vim commands with it.</p>

<p>I mainly use the :Buffert function which is absolutely fantastic and makes it super easy to work with multiple files at the same time.</p>]]></content><author><name></name></author><category term="open-source" /><category term="project" /><category term="vim" /><category term="words" /><summary type="html"><![CDATA[I recently changed clients and now have an assignment where I configure and troubleshoot several Linux systems. It is part of my daily work but I also do a lot of development in Python and C++, at my previous job the recommended editor was VSCodium and we had a lot of special plugins that made the work easier. That is why I chose to change my primary editor to VSCodium, I know it is not a compulsion but I have always found it easiest to work in one and the same editor both at work and in my free time.]]></summary></entry><entry><title type="html">I was this old when i found tmux</title><link href="/open-source/project/2025/09/04/i-was-this-old-when-i-found-tmux.html" rel="alternate" type="text/html" title="I was this old when i found tmux" /><published>2025-09-04T00:00:00+02:00</published><updated>2025-09-04T00:00:00+02:00</updated><id>/open-source/project/2025/09/04/i-was-this-old-when-i-found-tmux</id><content type="html" xml:base="/open-source/project/2025/09/04/i-was-this-old-when-i-found-tmux.html"><![CDATA[<p>Tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed. and conmntrolled from a single screen. <strong>tmux</strong> may be detached froma screen and continue running in the background, then lates reattached.</p>

<ul>
  <li>Fully customizable status bar</li>
  <li>Multiple window management</li>
  <li>Splitting window in several panes</li>
  <li>Automatic layouts</li>
  <li>Panel synchronization</li>
  <li>
    <p>Scriptability, which allows me to create custom tmux sessions for different purposes</p>

    <p><img class="img-fluid" src="/assets/img/2025-09-04-i-was-this-old-when-i-found-tmux.png" /></p>
  </li>
</ul>

<h4 id="install-tmux">Install tmux</h4>

<p>Tmux is avelibal in most distributions. I use Ubuntu so i install will <code class="language-plaintext highlighter-rouge">apt</code></p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  <span class="nv">$ </span><span class="nb">sudo </span>apt <span class="nb">install </span>tmux</code></pre></figure>

<h4 id="get-started">Get started</h4>
<p>To start using tmux, type tmux on your terminal. This command launches a tmux server, creates a default session (number 0) with a single window, and attaches to it.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">  <span class="nv">$ </span>tmux</code></pre></figure>

<h4 id="tmux-keybindings">Tmux keybindings</h4>

<ul>
  <li>Ctrl+B D — Detach from the current session.</li>
  <li>Ctrl+B % — Split the window into two panes horizontally.</li>
  <li>Ctrl+B “ — Split the window into two panes vertically.</li>
  <li>Ctrl+B Arrow Key (Left, Right, Up, Down) — Move between panes.</li>
  <li>Ctrl+B X — Close pane.</li>
  <li>Ctrl+B C — Create a new window.</li>
  <li>Ctrl+B N or P — Move to the next or previous window.</li>
  <li>Ctrl+B 0 (1,2…) — Move to a specific window by number.</li>
  <li>Ctrl+B : — Enter the command line to type commands. Tab completion is available.</li>
  <li>Ctrl+B ? — View all keybindings. Press Q to exit.</li>
  <li>Ctrl+B W — Open a panel to navigate across windows in multiple sessions.</li>
</ul>]]></content><author><name></name></author><category term="open-source" /><category term="project" /><category term="linux" /><category term="ubuntu" /><summary type="html"><![CDATA[Tmux is a terminal multiplexer: it enables a number of terminals to be created, accessed. and conmntrolled from a single screen. tmux may be detached froma screen and continue running in the background, then lates reattached.]]></summary></entry><entry><title type="html">Install Qt on Ubuntu 24.04.2</title><link href="/pen-source/project/2025/07/05/install-qt-on-ubuntu-24-04-2.html" rel="alternate" type="text/html" title="Install Qt on Ubuntu 24.04.2" /><published>2025-07-05T00:00:00+02:00</published><updated>2025-07-05T00:00:00+02:00</updated><id>/pen-source/project/2025/07/05/install-qt-on-ubuntu-24-04-2</id><content type="html" xml:base="/pen-source/project/2025/07/05/install-qt-on-ubuntu-24-04-2.html"><![CDATA[<p>This is how i installed Qt on Ubuntu 24.04.2.</p>

<ul>
  <li>First step go to <a href="https://www.qt.io/">Qt.io</a></li>
  <li>Click on the “Download. Try.” button.</li>
  <li>Click on “Community User”</li>
  <li>Scroll down to “Looking for Qt Binaries” and click download”</li>
  <li>Download (click) the Linux button.</li>
</ul>

<p>Now ytou will have a <code class="language-plaintext highlighter-rouge">qt-online-installer-linux-x64-4.10.0.run</code>
Make the file executable by running <code class="language-plaintext highlighter-rouge">chmod +x qt-online-installer-linux-x64-4.10.0.run</code></p>

<p>You will need to create a Qt account and after this it will be installed.</p>]]></content><author><name></name></author><category term="pen-source" /><category term="project" /><category term="Qt" /><category term="Ubuntu" /><summary type="html"><![CDATA[This is how i installed Qt on Ubuntu 24.04.2.]]></summary></entry><entry><title type="html">Updated SDL2Bootstrap</title><link href="/open-source/project/2025/02/23/updated-sdl2bootstrap.html" rel="alternate" type="text/html" title="Updated SDL2Bootstrap" /><published>2025-02-23T00:00:00+01:00</published><updated>2025-02-23T00:00:00+01:00</updated><id>/open-source/project/2025/02/23/updated-sdl2bootstrap</id><content type="html" xml:base="/open-source/project/2025/02/23/updated-sdl2bootstrap.html"><![CDATA[<p>I updated my <a href="https://github.com/niklasnson/SDL2Bootstrap">SDL2 Bootstrap</a>, i will start working on a small game, just to do some other programming than i normally do in C++. The game will live at <a href="https://github.com/niklasnson/missile_command.cpp">GitHub</a>.</p>

<p>My thought is to have a easy setup to start doing a new game with the basic skeleton that you might want to have.</p>]]></content><author><name></name></author><category term="open-source" /><category term="project" /><category term="cpp" /><category term="sdl2" /><category term="gamedev" /><summary type="html"><![CDATA[I updated my SDL2 Bootstrap, i will start working on a small game, just to do some other programming than i normally do in C++. The game will live at GitHub.]]></summary></entry><entry><title type="html">epilogue.rb</title><link href="/open-source/project/2025/02/08/epilogue-rb.html" rel="alternate" type="text/html" title="epilogue.rb" /><published>2025-02-08T00:00:00+01:00</published><updated>2025-02-08T00:00:00+01:00</updated><id>/open-source/project/2025/02/08/epilogue-rb</id><content type="html" xml:base="/open-source/project/2025/02/08/epilogue-rb.html"><![CDATA[<p>I just started working a new project, i spent time thinking about a web based notes system for a while and im thinking it will be a fun project to do in Rails 8.0. I have started working on scaffolding the application and as soon as i have made the first basic functions i will make the code public on github.</p>

<p>Name on the project is epilogue.rb - i will keep you posted on updates.</p>]]></content><author><name></name></author><category term="open-source" /><category term="project" /><category term="ruby" /><category term="rspec" /><category term="rails" /><summary type="html"><![CDATA[I just started working a new project, i spent time thinking about a web based notes system for a while and im thinking it will be a fun project to do in Rails 8.0. I have started working on scaffolding the application and as soon as i have made the first basic functions i will make the code public on github.]]></summary></entry><entry><title type="html">Installing KDE Frameworks</title><link href="/open-source/kde/2023/12/16/installing-kde-frameworks.html" rel="alternate" type="text/html" title="Installing KDE Frameworks" /><published>2023-12-16T00:00:00+01:00</published><updated>2023-12-16T00:00:00+01:00</updated><id>/open-source/kde/2023/12/16/installing-kde-frameworks</id><content type="html" xml:base="/open-source/kde/2023/12/16/installing-kde-frameworks.html"><![CDATA[<p>After following the instructions found at <a href="https://community.kde.org/Get_Involved/development/Set_up_a_development_environment">Get Involved/development/Set up a development environment</a>. I got some strange errors running my sample CMAKE file.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">Installing <span class="k">in</span> /usr/local. Run /home/niklasnson/Projects/Active/sample/build/prefix.sh to <span class="nb">set </span>the environment <span class="k">for </span>helloworld.
fatal: not a git repository <span class="o">(</span>or any of the parent directories<span class="o">)</span>: .git
fatal: not a git repository <span class="o">(</span>or any of the parent directories<span class="o">)</span>: .git
<span class="nt">--</span> Could NOT find KF5CoreAddons <span class="o">(</span>missing: KF5CoreAddons_DIR<span class="o">)</span>
<span class="nt">--</span> Could NOT find KF5CoreAddons: found neither KF5CoreAddonsConfig.cmake nor kf5coreaddons-config.cmake
<span class="nt">--</span> Could NOT find KF5I18n <span class="o">(</span>missing: KF5I18n_DIR<span class="o">)</span>
<span class="nt">--</span> Could NOT find KF5I18n: found neither KF5I18nConfig.cmake nor kf5i18n-config.cmake
CMake Error at /usr/share/cmake-3.27/Modules/FindPackageHandleStandardArgs.cmake:230 <span class="o">(</span>message<span class="o">)</span>:
  Could NOT find KF5 <span class="o">(</span>missing: CoreAddons I18n<span class="o">)</span> <span class="o">(</span>found suitable version
  <span class="s2">"5.110.0"</span>, minimum required is <span class="s2">"5.78.0"</span><span class="o">)</span>
Call Stack <span class="o">(</span>most recent call first<span class="o">)</span>:
  /usr/share/cmake-3.27/Modules/FindPackageHandleStandardArgs.cmake:600 <span class="o">(</span>_FPHSA_FAILURE_MESSAGE<span class="o">)</span>
  /usr/share/ECM/find-modules/FindKF5.cmake:93 <span class="o">(</span>find_package_handle_standard_args<span class="o">)</span>
  CMakeLists.txt:21 <span class="o">(</span>find_package<span class="o">)</span></code></pre></figure>

<p>After while i found a this <a href="https://github.com/ktechlab/ktechlab/issues/53">issue</a> where i found out to add the following development packages.</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash">libkf5doctools-dev
libkf5texteditor-dev
libkf5kdelibs4support-dev</code></pre></figure>

<p>Now i can run my cmake file without any errors.</p>]]></content><author><name></name></author><category term="open-source" /><category term="KDE" /><category term="cpp," /><category term="kde" /><category term="kde-community" /><summary type="html"><![CDATA[After following the instructions found at Get Involved/development/Set up a development environment. I got some strange errors running my sample CMAKE file.]]></summary></entry><entry><title type="html">Normalizes method in Rails 7.1</title><link href="/ruby/2023/12/03/normalizes-method-in-rails-7-1.html" rel="alternate" type="text/html" title="Normalizes method in Rails 7.1" /><published>2023-12-03T00:00:00+01:00</published><updated>2023-12-03T00:00:00+01:00</updated><id>/ruby/2023/12/03/normalizes-method-in-rails-7-1</id><content type="html" xml:base="/ruby/2023/12/03/normalizes-method-in-rails-7-1.html"><![CDATA[<p>I’m refactoring my normalizes methods in Rails with tne new <a href="https://edgeapi.rubyonrails.org/classes/ActiveRecord/Normalization/ClassMethods.html#method-i-normalizes">normalizes</a> method. Lets take a look together.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">normalizes</span> <span class="ss">:email</span><span class="p">,</span> <span class="ss">with: </span><span class="o">-&gt;</span> <span class="n">email</span> <span class="p">{</span> <span class="n">email</span><span class="p">.</span><span class="nf">strip</span><span class="p">.</span><span class="nf">downcase</span> <span class="p">}</span>
<span class="k">end</span>

<span class="n">user</span> <span class="o">=</span> <span class="no">User</span><span class="p">.</span><span class="nf">create</span><span class="p">(</span><span class="ss">email: </span><span class="s2">" CRUISE-CONTROL@EXAMPLE.COM</span><span class="se">\n</span><span class="s2">"</span><span class="p">)</span>
<span class="n">user</span><span class="p">.</span><span class="nf">email</span>                  <span class="c1"># =&gt; "cruise-control@example.com"</span></code></pre></figure>

<p>Code in my project before the refactoring, for the username i use the unicode_normalice function to return a normalized form of str, using Unicode normalizations NFC, NFD, NFKC, or NFKD.</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby">  <span class="k">def</span> <span class="nf">normalize_username</span>
    <span class="n">username</span><span class="p">.</span><span class="nf">unicode_normalize!</span>
    <span class="nb">self</span><span class="p">.</span><span class="nf">username_lower</span> <span class="o">=</span> <span class="n">username</span><span class="p">.</span><span class="nf">downcase</span>
  <span class="k">end</span>
<span class="p">}</span></code></pre></figure>

<p>After refactoring the code it looks like this:</p>

<figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ApplicationRecord</span>
  <span class="n">normalizes</span> <span class="ss">:username</span><span class="p">,</span> <span class="ss">with: </span><span class="o">-&gt;</span> <span class="n">username</span> <span class="p">{</span> <span class="n">username</span><span class="p">.</span><span class="nf">unicode_normalize</span><span class="p">.</span><span class="nf">strip</span><span class="p">.</span><span class="nf">downcase</span> <span class="p">}</span>
<span class="k">end</span></code></pre></figure>

<p>And we have a bit more clean code with less functions to test.</p>]]></content><author><name></name></author><category term="ruby" /><category term="rails" /><category term="rails" /><summary type="html"><![CDATA[I’m refactoring my normalizes methods in Rails with tne new normalizes method. Lets take a look together.]]></summary></entry></feed>